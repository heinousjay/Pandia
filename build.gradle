apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

apply plugin: PhantomJSSetupPlugin

class PhantomJSSetupPlugin implements Plugin<Project> {
    void apply(Project project) {
		
		def rootDir = "${project.buildDir}/phantomjs"
		def executable = "${rootDir}/bin/phantomjs"
		def needsPermissionChange = true
		def classifier = { os, arch ->
			if (os == 'Mac OS X') {
				'macosx'
			} else if (os =~ /^Windows/) {
				needsPermissionChange = false
				executable = "${rootDir}/phantomjs.exe"
				'windows'
			} else if (os == 'Linux' && arch =~ '64') {
				'linux-64'
			} else if (os == 'Linux') {
				'linux-32'
			} else {
				'unsupported-operating-system'
			}
		}(System.getProperty('os.name'), System.getProperty("sun.arch.data.model"))
		
		project.afterEvaluate {
			project.configurations.create('phantomJS')
			project.dependencies.add('phantomJS', "org.jboss.arquillian.extension:arquillian-phantom-binary:1.9.2:${classifier}")
		
			project.task('setUpPhantomJS', type:Copy) {
				
				// there's only one jar in the file, so just get the first one
				from project.zipTree(project.configurations.phantomJS.files.find { true })
				include 'bin/phantomjs'
				include 'phantomjs.exe'
				
				into rootDir
				
				if (needsPermissionChange) {
					doLast {
						ant.chmod(file:executable, perm:'700')
					}
				}
			}
			
			project.tasks.withType(Test) {
				systemProperty 'phantomjs.binary.path', executable
				dependsOn project.tasks.setUpPhantomJS
			}
		}
	}
}

group = 'com.jibbrjabbr'
version = '0.5-SNAPSHOT'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

tasks.withType(Compile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Test) {
	testLogging {
		exceptionFormat 'full'
	}
}

repositories {
    mavenCentral()
}

dependencies {
	
	compile 'com.google.inject:guice:3.0'
	compile 'com.google.inject.extensions:guice-multibindings:3.0'
	compile 'org.javassist:javassist:3.18.1-GA'
	compile 'org.slf4j:slf4j-api:1.7.6'
	compile('ch.qos.logback:logback-classic:1.0.7') {
		exclude group: 'org.slf4j'
	}	
	compile('junit:junit:4.11') {
		exclude group: 'org.hamcrest'
	}
	compile 'com.github.detro.ghostdriver:phantomjsdriver:1.1.0'
	
	testCompile('org.mockito:mockito-core:1.9.5') {
		exclude group: 'org.hamcrest'
	}
	testCompile 'org.hamcrest:hamcrest-library:1.3'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PACKAGE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (hasProperty('signing.keyId')) {

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	signing {
		sign configurations.archives
	}

	if (project.hasProperty('ossrhUsername')) {
		uploadArchives {
			repositories {
				mavenDeployer {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
		
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: ossrhUsername, password: ossrhPassword)
					}
		
					snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
						authentication(userName: ossrhUsername, password: ossrhPassword)
					}
		
					pom.project {
						name 'Pandia'
						packaging 'jar'
						description 'A declarative page object factory for selenium.'
						url 'https://github.com/heinousjay/Pandia'
		
						scm {
							connection 'scm:git:https://github.com/heinousjay/Pandia.git'
							developerConnection 'scm:git:git@github.com:heinousjay/Pandia.git'
							url 'https://github.com/heinousjay/Pandia'
						}
		
						licenses {
							license {
								name 'The Apache Software License, Version 2.0'
								url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
							}
						}
		
						developers {
							developer {
								id 'jason'
								name 'Jason Miller'
								email 'jay@heinousjay.com'
							}
						}
					}
				}
			}
		}
	}
}
