//import java.io.File;

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

group = 'jibbrjabbr'
version = '0.5'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

// set up phantomjs for our test
def rootDir = "${buildDir}/phantomjs"
def executable = "${rootDir}/bin/phantomjs"
def needsPermissionChange = true
def classifier = { os, arch ->
	if (os == 'Mac OS X') {
		'macosx'
	} else if (os =~ /^Windows/) {
		needsPermissionChange = false
		executable = "${rootDir}/phantomjs.exe"
		'windows'
	} else if (os == 'Linux' && arch =~ '64') {
		'linux-64'
	} else if (os == 'Linux') {
		'linux-32'
	} else {
		'unsupported-operating-system'
	}
}(System.getProperty('os.name'), System.getProperty("sun.arch.data.model"))

tasks.withType(Compile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Test) {
	testLogging {
		exceptionFormat 'full'
	}
	systemProperty 'phantomjs.binary.path', executable
}

configurations {
	phantomJS {
		transitive = false
	}
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	
	compile 'com.google.inject:guice:3.0'
	compile 'com.google.inject.extensions:guice-multibindings:3.0'
	compile 'org.javassist:javassist:3.18.1-GA'
	compile 'org.slf4j:slf4j-api:1.7.6'
	compile('ch.qos.logback:logback-classic:1.0.7') {
		exclude group: 'org.slf4j'
	}	
	compile('junit:junit:4.11') {
		exclude group: 'org.hamcrest'
	}
	compile 'com.github.detro.ghostdriver:phantomjsdriver:1.1.0'
	
	testCompile('org.mockito:mockito-core:1.9.5') {
		exclude group: 'org.hamcrest'
	}
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	
	phantomJS "org.jboss.arquillian.extension:arquillian-phantom-binary:1.9.2:${classifier}"
}

task setUpPhantomJS(type:Copy) {
	
	// there's only one jar in the file, so just get the first one
	from zipTree(configurations.phantomJS.files.find { true })
	include 'bin/phantomjs'
	include 'phantomjs.exe'
	
	into rootDir
	
	if (needsPermissionChange) {
		doLast {
			ant.chmod(file:executable, perm:'700')
		}
	}
}

test.dependsOn setUpPhantomJS