apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.jibbrjabbr'
version = '0.6-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	//options.compilerArgs += '-Xlint:all'
}

tasks.withType(Test) {
	testLogging {
		exceptionFormat 'full'
	}
}

repositories {
    mavenCentral()
}

dependencies {
	
	compile 'com.google.inject:guice:4.0'
	compile 'com.google.inject.extensions:guice-multibindings:4.0'
	compile 'org.javassist:javassist:3.20.0-GA'
	compile 'org.slf4j:slf4j-api:1.7.16'
	compile('ch.qos.logback:logback-classic:1.1.5') {
		exclude group: 'org.slf4j'
	}
	compile('junit:junit:4.12') {
		exclude group: 'org.hamcrest'
	}
	compile 'org.seleniumhq.selenium:selenium-java:2.52.0'
	compile 'com.machinepublishers:jbrowserdriver:0.10.1'
	
	testCompile('org.mockito:mockito-core:2.0.43-beta') {
		exclude group: 'org.hamcrest'
	}
	testCompile 'org.hamcrest:hamcrest-library:1.3'
}

jar {
	manifest {
		attributes(
			"Implementation-Version": version,
			"Implementation-Title": project.name
		)
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PACKAGE
	options.stylesheetFile(rootProject.file('src/main/javadoc/stylesheet.css'))
	options.footer(
		'<script src="http://alexgorbatchev.com/pub/sh/current/scripts/shCore.js" type="text/javascript"></script>' + 
		'<script src="http://alexgorbatchev.com/pub/sh/current/scripts/shBrushJava.js" type="text/javascript"></script>' +
		'<script type="text/javascript">SyntaxHighlighter.defaults["auto-links"] = false;SyntaxHighlighter.defaults["tab-size"] = 2;SyntaxHighlighter.all();</script>'
	)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (hasProperty('signing.keyId')) {

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	signing {
		sign configurations.archives
	}

	if (project.hasProperty('ossrhUsername')) {
		uploadArchives {
			repositories {
				mavenDeployer {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: ossrhUsername, password: ossrhPassword)
					}

					snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
						authentication(userName: ossrhUsername, password: ossrhPassword)
					}

					pom.project {
						name 'Pandia'
						packaging 'jar'
						description 'A declarative page object factory for selenium.'
						url 'https://github.com/heinousjay/Pandia'

						scm {
							connection 'scm:git:git@github.com:heinousjay/Pandia.git'
							developerConnection 'scm:git:git@github.com:heinousjay/Pandia.git'
							url 'git@github.com:heinousjay/Pandia.git'
						}

						licenses {
							license {
								name 'The Apache Software License, Version 2.0'
								url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
							}
						}

						developers {
							developer {
								id 'jason'
								name 'Jason Miller'
								email 'jay@heinousjay.com'
								organizationUrl 'https://github.com/heinousjay'
							}
						}
					}
				}
			}
		}
	}
}

defaultTasks 'build'
